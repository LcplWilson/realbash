bash 

history = display history 

ctrl r = search

shift g = takes you to the bottom of the man page

g = takes you to the top

/(word) = is the control f for man

n = is the movement command for man

pwd = where you are

$home = home directory 

touch = creates file 
example: touch newfile

touch -t = time editing 

touch -r = copy time of another file

mkdir = new file

mkdir -p = allows nesting 
example newfolder/newsubfolder

rmdir = remove folder 

rmdir -p = removes folders and nested folder 
example: rmdir -p newfolder/newsubfolder

ls = displays whats in the directory
ls, ls -lisa

cat = view 

symbiotic link  = ln -s (filename)

Cat = view 
head = first 10 lines 
tail = last 10 lines 
more = one screen at a time 
less = less info

find (path of file or search location) -iname (searched thing) = not case sensitive find 
find (path of file or search location) -inum
find (path of file or search location) (option) (searched thing) 2>/dev/null =  sends the errors to dev null
find (path of file or search location) -size = the size
find (path of file or search location) -maxdepth (number) = how many folders deep to go into
find (path of file or search location) -user student = shows things that student owns
find (path of file or search location) - maxdepth -d 2 = shows 2 directories deep
find (path of file or search location) -name *.txt = finds txt files 
find -empty = finds empty directories 
find -size = finds file sizes
find $HOME/1123 -name *.txt ! -name *~.txt -exec cp {} $HOME/1123 $HOME/CUT \;
modified access created times = mac times 

find / -atime (3) = find what was access in the last 3 days
find / -ctime (3) = find what was created in the last 3 days
find / -mtime (3) = find what was modified in the last 3 days
find / -cmin = find what was created in the last hour
find / -amin = find what was access in the last hour
find / -mmin = find what was modified in the last hour
find / -executable ! -d = searches for executables excluting directories 
find / -type d -iname log -exec ls -l {} \; 2>/dev/null = searchs for directories named log then executs a ls -l on it 
find /var/log -iname *.log -exec ls -la {} \; 2>/dev/null
find var/log -iname *.log 2>/dev/nullv= -printf "%i %f\n"
%i = inodes 
%f =files
-name = find option that specifies name 
-iname = not case sensitive option

touch {1..10}.txt = expample of brace expansion, basically creats as many as there are in the brackets 

cat /etc/passwd | grep (what you want to search)
egrep "student|root|randomuser" /etc/password
egrep '^[a-zA-Z]' (dir you want to search)
cat /etc/passwd | grep -o /home.*/ = -o means only matching 
cat /etc/passwd | grep -n home = -n gives line numbers
cat /etc/passwd | grep -v 
grep -C3 'root' /etc/passwd = -c3 shows 3 lines before and after the found line
grep -A3 'root' /etc/passwd = -a3 shows 3 lines after the found line
grep -B3 'root' /etc/password = -b3 shows 3 lines before the found line 


ps -u student = -u shows process ran but student 
ps --forest = proccess version of tree shows the parent child format in the process 


kill -9 PID 
more /etc/passwd | cut -d: -f1 = this isolates the first field in the more of /etc/passwd 
more /etc/passwd | cut -d: -f2- = this prints the second field and everything to the right 
more /etc/passwd | cut -d: -f1-4 = this prints 1-4
more /etc/passwd | cut -c3-10 = the -c is for charactors 
more /etc/passwd | cut -d- -f1- -s = -s is for specifics 
echo "cosc zero seven" | cut -d" " -f2 --complement = everything but f2
cut = cuts on a delimiter
-f = shows everything to the left
\ = split longs commands into mutiple lines 
| = appends 
&& = and 
|| = or 
cp = copys file 
move = moves file
2>/dev/null = sends errors to null
>> = appends
> = overwrite


tail passwd | awk -F: '{print $1,$3}' = prints fields 1 and 3 
tail passwd | awk -F: '{print $NF}' = prints the last field
awk = more powerful and specific cut
$NF = is the last field
-F = diliminator 
$0 = print the entire line 
tail passwd | awk -F: 'BEIGN {OFS="#"}{print $1,$3,$6}' = changes the field separator from ' ' to '#' 
awk and cut do not change the og information but are in a sense filters
cat passwd | awk -F: '($3 >= 150){print $0}' = conditional operation
awk -v myvar=$(sed -i 's/root/groot/g' $HOME/passwd) -F: '{OFS=":"}{$1=myvar; print}'
-v = declarces varible 
-i = makes the change permanint 


sed = stream editor
A=$(cat /etc/passwd) = creates varable that can echo results
echo a
B='cat /etc/passwd'  = stores as a string but when called upon it shows /etc/passwd when echod it returns a string
sed 's/home/nobodyhome/g' passwd = substatutes home with nobodyhome in the passwd file and would substatute all instances in the file 
g = global
s = substitute 
sed 's/\/bin\/bash/\/been/\better/g' sed passwd
sed '/home/d' passwd = deletes every instances
sed -e 'xrdp/d' -e 'telnetd/d' passwd = deletes muliple lines


cat sort.txt | awk -F: '{print $1}' | sort -u = shows values in the first sector then sorts them by acii table and with -u it makes then shows one instance 
cat sort.txt | awk -F: '{print $1}' | sort -n =sorts by number
cat sort.txt | awk -F: '{print $1}' | uniq = sorts uniquly 
cat sort.txt | awk -F: '{print $1}' | uniq -c = sourts with count of occurence


alias vim='nano'  = alias gives a name for another command
alias l='ls -l' $HOME = l is now ls -l for the home directory
alais -p = shows all alias on the box
unalias vim = remove alias from command  

How to make a varible/parameter:
(var)=(content)
$ is only needed when calling upon it
A=120
B=20
epr $A - $B
100

C=$(expr $A -$B)
echo $c
100

special perameters:
echo $# = counts the aruements passed
echo $0 = shows name of script
echo $@ = positional parameter starting at one
echo $* = shows the arguments
echo $? = exit code 
echo $_ = prints out the prevoius line
echo $$ = shows PID
echo $- = shows flags
echo $! = PID of most recent background

md5sum:
echo /home/student | md5sum = hashing the string of characters that echo returns
md5sum (file) = hashes a file


functions: require 
function name 
call upon the name at the end and make sure you have the {}


LOOPS: 
for x in {1..10}; do 
> echo $x
> done
1
2
3
4
5
6
7
8
9
10


for x in $(cat ips.txt); do
> echo $x
> done
(cated the file ips.txt and showed ips)



#!/bin/bash
for x in  $(cat /etc/passwd | awk -F: '{print $1}')
            do echo $x is a user on this system
done 
(result) = prints field 1 with the is a user on this system



x=0
while true; do 
> if [[ $x -gt 10 ]] ; then
> break
> fi
> echo $x
> x=$(($x+1))
> done
0
1
2
3
4
5
6
7
8
9
10
(greater then)



while [[ $x -le '10' ]]; do
> echo $x
> x=$(($x+1))
> done
0
1
2
3
4
5
6
7
8
9
10
(less then or equal to)


ip route 
which
tar 
zip



question 1
Brace expansion is a mechanism by which arbitrary strings may be generated, 
for commands that will take multiple arguements. For the below examples, the first example is equivalent to the second command.

$ mkdir /var/log/{auth,syslog,dmesg}_log

Results in

$ mkdir /var/log/auth_log /var/log/syslog_log /var/log/dmesg_log

Activity: Using Brace-Expansion, create the following directories within the $HOME directory:

    1123
    1134
    1145
    1156

To read more on Brace Expansion, go to the following resource:

    https://www.gnu.org/software/bash/manual/bash.html#Brace-Expansion

ANSWER:
mkdir $HOME/{1123,1134,1145,1156}



Question 2
As we learned, the following example would create five files with one command.

touch file1.txt file2.txt file3.txt passwd.txt shadow.txt

But, with Brace Expansion it can be shortened to the following.

touch file{1..3}.txt passwd.txt shadow.txt

Activity:

Use Brace-Expansion to create the following files within the $HOME/1123 directory. You may need to create the $HOME/1123 directory. Make the following files, but utilze Brace Expansion to make all nine files with one touch command.

Files to create:

    1.txt
    2.txt
    3.txt
    4.txt
    5.txt
    6~.txt
    7~.txt
    8~.txt
    9~.txt

ANSWER:
mkdir $HOME/1123
touch $HOME/1123/{1..5}.txt
touch $HOME/1123/{6..9}~.txt



Question 3 
Using the find command, list all files in $HOME/1123 that end in .txt.

Be aware that if you use Pattern Matching to locate the files you may have unintended results based on if you use quotes around the pattern or not. If you do not quote the pattern, the Bash shell interprets the pattern. If you quote the pattern, it is passed to the command for it to interpret. You can have a properly functioning command, yet unintended output, based on which of these two gets to interpret the pattern.

To read more on Pattern Matching, go to the following resource:

    https://www.gnu.org/software/bash/manual/bash.html#Pattern-Matching

To read more on Quoting, go to the following resource:

    https://www.gnu.org/software/bash/manual/bash.html#Quoting

ANSWER:
find $HOME/1123 -name *.txt

Question 4:
List all files in $HOME/1123 that end in .txt. Omit the files containing a tilde (~) character.

While this activity can be accomplished with only find, it can also be combined with grep as well.

Anwser:
find $HOME/1123 -name *.txt ! -name *~.txt


Question 5:
Copy all files in the $HOME/1123 directory, that end in ".txt", and omit files containing a tilde "~" character, to directory $HOME/CUT.

Use only the find and cp commands. You will need to utilize the -exec option on find to accomplish this activity.

The find command uses BOOLEAN "!" to designate that it does not want to find any files or directories that follows.

ANSWER:
find $HOME/1123 -name *.txt ! -name *~.txt -exec cp {} $HOME/1123 $HOME/CUT \;


Question 6:
Using ONLY the find command, find all empty files/directories in directory /var and 
print out ONLY the filename (not absolute path), and the inode number, separated by newlines.

Tip: When using the man pages, it is better to focus your search then to visually scan 1000+ lines of text. 
Combining the output with the grep command, possibly with its -A, -B, or -C options, can help drive context driven searches of those manual pages.

Example Output

123 file1
456 file2
789 file3


ANSWER:
find /var -empty -printf "%i %f\n"

Question 7:
Using only the ls -l and cut Commands, write a BASH script that shows all filenames with extensions ie: 1.txt, etc., but no directories, in $HOME/CUT.
    Write those to a text file called names in $HOME/CUT directory.
    Omit the names filename from your output.

NOTE: The output should only be the file names with no additional information. Additionally, your code will be executed twice. T
his is to ensure you have taken into account how file redirection and command execution works.

To read more on Redirecting Output, go to the following resource:

    https://www.gnu.org/software/bash/manual/bash.html#Redirecting-Output

To read more on Simple Command Expansion, go to the following resource:

    https://www.gnu.org/software/bash/manual/bash.html#Simple-Command-Expansion


ANSWER:
ls -p $HOME/CUT | grep -v '/$' | grep -v 'names' > $HOME/CUT/names


Question 8:
Using ONLY the find command, find all files on the system with inode 4026532575 and print only the filename to the screen, not the absolute path to the file, separating each filename with a newline. 
Ensure unneeded output is not visible.

Tip: The above inode is specific to this CTFd question and might not be in use on your Linux Opstation. 
Instead, you can test your command on your Linux OpStation against inode 999.

ANSWER:
find / -inum 4026532575 -printf "%f\n"


Question 9:
Write a basic bash script that greps ONLY the IP addresses in the text file provided (named StoryHiddenIPs in the current directory); sort them uniquely by number of times they appear.

It is not important to have a regular expression that only catches fully valid IP addresses. It is more important that you become familiar with creating and using regular expressions. Below, there are some useful websites that you can use to visually see what your regular expression pattern is matching on.

    www.regexr.com
    www.regex101.com

E.g., [1-4]{0,5}

Bracket Expression: [1-4] = 1 or 2 or 3 or 4

Repetitions: {0,5} = above numbers (1,2,3,4) appear from 0 to 5 times, meaning our number can be between 1 and 44444

Interpreted BASH Chars: . | $ ` \ ! must be escaped with \ in a regex. I.E. to match on a backslash, you must use \\ in your pattern.

Note: The basics of regular expressions are assumed knowledge for this module, and you will need to call back to prior learning. If you are in need of a quick refresher, the following man pages could be useful.

    man egrep
    man regex.7


ANSWER: 
grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' StoryHiddenIPs | sort -n | uniq -c | sort -r


Question 10: 

    Using ONLY the awk command, write a BASH one-liner script that extracts ONLY the names of all the system and user accounts that are not UIDs 0-3.
    Only display those that use /bin/bash as their default shell.
    The input file is named $HOME/passwd and is located in the current directory.
    Output the results to a file called $HOME/SED/names.txt

Tip: awk can use conditional statements, e.g. print only the line in /etc/passwd that has "root" as its first field.

awk -F: '($1 == "root") {print $0}' /etc/passwd


Answer:
cat $HOME/passwd | awk -F: '($3 > 3 && $7 == "/bin/bash"){print $1}' > $HOME/SED/names.txt


QUESTION 11:

    Write a Bash script using "Command Substitution" to replace all passwords, using openssl, from the file $HOME/PASS/shadow.txt with the MD5 encrypted password: Password1234, with salt: bad4u
    Output of this command should go to the screen/standard output.
    You are not limited to a particular command, however you must use openssl. Type man openssl passwd for more information.

TIP: While not required, using awk is possibly the most straightforward method of accomplishing this activity. Keep in mind that awk is its own programming language. 
It can not use Bash variables unless you import them in. Below is a break down of applicable parts of an awk command, with descriptions of each part. 
See if you can use this example as a jumping off point to accomplish the end state of the activity.

#!/bin/bash 

a=”New name to place in field one” 
awk -F: -v "awk_var=$a" 'BEGIN {OFS=":"} {$1=awk_var} {print $1,$NF}' /etc/passwd

# '-F' is used to change the default field seperator of " ".  In this example, it   \
# now designates ':'

# '-v' designates or imports a variable into AWK.  In the above example, 'awk_var' is   \
# declared with the Bash variable of '$a'.

# The 'BEGIN' pattern(s) tells AWK to execute action parts of the pattern before any of \
# the input is read.  In this case, the 'OFS', or 'Output Field Seperator' will place   \
# colons between the firelds being printed in the output.  As well, it will replace the \
# first field (i.e. '$1') with whatever data is contained in the AWK variable declared  \
# previously.

# The '{print}' statement designates whatever the desired fields are to print.  '$0' is \
# the variable for the entire line.  The first field is '$1', the second field is '$2', \
# and so on.  AWK has a builtin variable, '$NF' which evaluates to the number of fields \
# on a line.  Use this as a shortcut if you need to print the last field on the line.

To read more on Shell Expansion, go to the following resource:

    https://www.gnu.org/software/bash/manual/html_node/Shell-Expansions.html#Shell-Expansions

To read more on the Shadow file format, go to the following resource:

    man shadow.5


ANSWER:
#!/bin/bash
a=$(openssl passwd -1 -salt bad4u Password1234) 
awk -F: -v "var=$a" 'BEGIN {OFS=":"} {$2=var} {print $0}' $HOME/PASS/shadow.txt


Question 12:

    Using ONLY sed, write all lines from $HOME/passwd into $HOME/PASS/passwd.txt that do not end with either /bin/sh or /bin/false.

TIP: When designating a path in a sed command, you must escape the path characters if they are to be interpreted as part of the string

sed '/\/bin/d' file.txt



Answer:
sed -e '/\/bin\/sh/d' -e '/\/bin\/false/d' $HOME/passwd>  $HOME/PASS/passwd.txt


QUESTION 13:

    Using find, find all files under the $HOME directory with a .bin extension ONLY.
    Once the file(s) and their path(s) have been found, remove the file name from the absolute path output.
    Ensure there is no trailing / at the end of the directory path when outputting to standard output.
    You may need to sort the output depending on the command(s) you use. Have each path displayed only once.

Tip: For stripping the filename out of the output, there are different ways that this can be accomplished based on what you have learned so far.

    Utilizing -printf options on find.
    Utilizing awk to manipulate the fields. This may leave the trailing / if you don't take that into account.
    Utilizing the rev and cut commands creatively.


Answer: 
find $HOME -type f -iname "*.bin" 2>/dev/null | rev | cut -d/ -f2- | rev | sort -u



QUESTION 14:
Write a script that will do the following.

    Write a script which will copy the last entry/line in the passwd-like file specified by the $1 positional parameter
    Modify the copied line to change:
        User name to the value specified by $2 positional parameter
        Used id and group id to the value specified by $3 positional parameter
        Home directory to a directory matching the user name specified by $2 positional parameter under the /home directory (i.e. if the $2 was 'Chris', the new line would have /home/Chris as its home directory)
        The default shell to `/bin/bash'
    Append the modified line to the end of the file

Example INPUT file's last line.

games:x:5:60::/usr/games:/usr/sbin/nologin

If positional parameter 2 was passed "devildog" and positional paramter 3 was passed "9001", after modifications the appended line would look like this.

devildog:x:9001:9001::/home/devildog:/bin/bash

Tip: awk provides the simplest method for completing this activity. 
Refer back to your notes on "09 - BASH Activity" if you are in need of starting point on this activity.

Note: The contents of the passwd-like file will be randomly generated on each submission. It is intended to read the last line once and store it in a variable.

To read more on Positional Parameters, go to the following resource:

    https://www.gnu.org/software/bash/manual/bash.html#Positional-Parameters

To read more on the Passwd file format, go to the following resource:

    man passwd.5


ANSWER:
name=$2
uid=$3
file=$1
base=$(tail -1 $file)
echo $base |
awk -F: -v "awkname=$name" -v "awkuid=$uid" 'BEGIN {OFS=":"} {$1=awkname} {$3=awkuid} {$4=awkuid} {$6="/home/"awkname} {$NF="/bin/bash"} {print $0}' >> $file


QUESTION 15:

    Find all executable files under the following four directories:
        /bin
        /sbin
        /usr/bin
        /usr/sbin
    Sort the filenames with absolute path, and get the md5sum of the 10th file from the top of the list.

Tip: In the below example, you can see the different uses of md5sum. While not wrong, the first command is hashing the string output of the the find command. In the second, md5sum is hashing the file contents of the given file, which is what is intended for this activity. You can also tell the second method hashed the file as the file name is listed in the hash output; the first only lists a hyphen indicating a string was hashed. For this activity, to provide md5sum with the 10th file of the sorted output, it is recommended to use Command Subtitution.

[chris@localhost ~]$ find /etc -maxdepth 1 -name passwd | md5sum
9231fb35b4431d59eae53a8c0d673231  -
[chris@localhost ~]$ md5sum /etc/passwd
62f5fa5100adcee3305cf979b5734a3e  /etc/passwd


ANSWER:
A=$(find /bin /sbin /usr/bin /usr/sbin -executable -type f| sort |head -10 | tail -1)
md5sum $A | cut -d' ' -f1


QUESTION 16:

    Write a script which will find and hash the contents 3 levels deep from each of these directories: /bin /etc /var
    Your script should:
        Exclude file type named pipes. These can break your script.
        Redirect STDOUT and STDERR to separate files.
        Determine the count of files hashed in the file with hashes.
        Determine the count of unsuccessfully hashed directories.
        Have both counts output to the screen with an appropriate title for each count.

Example Output:

Successfully Hashed Files: 105
Unsuccessfully Hashed Directories: 23


ANSWER:
dirs=' /bin /etc/ var'
find $dirs -maxdepth 3! -type p -exec md5sum {} \; > STDOUT.txt 2>STDERR.txt
good=$(cat STDOUT.txt |wc -l)
bad=$(egrep "Is a" STDERR.txt | wc -l)
echo "Successfully Hashed Files: $good"
echo "Unsuccessfully Hashed Directories: $bad"


A=$(find /bin /etc /var -maxdepth 3 ! -type p -exec md5sum {}\; > $HOME/goodhash 2>$HOME/badhash)
B=$(cat $HOME/badhash | grep -v "Permission denied" | wc -l)
C=$(cat $HOME/goodhash | wc -l)
echo "Successfully Hashed Files:" $C
echo "Unsuccessfully Hashed Directories:" $B




Question:

Design a script that detects the existence of directory: $HOME/.ssh

    Upon successful detection, copies any and all files from within the directory $HOME/.ssh to directory $HOME/SSH and produce no output. You will need to create $HOME/SSH.
    Upon un-successful detection, displays the error message "Run ssh-keygen" to the user.

NOTE: If the $HOME/.ssh directory does not exist, one may run the ssh-keygen command. Accept all defaults for the purposes of this exercise. This is not necessary for passing the activity but can be used for testing on your local machine.


answer:
if [[ -d $HOME/.ssh ]]; then
mkdir $HOME/SSH
cp -r $HOME/.ssh/. $HOME/SSH
else
echo "Run ssh-keygen"
fi


question:

    Write a script that determines your default gateway ip address. Assign that address to a variable using command substitution.
        NOTE: Networking on the CTFd is limited for security reasons. ip route and route are emulated. Use either of those with no arguments/switches.
    Have your script determine the absolute path of the ping application. Assign the absolute path to a variable using command substitution. HINT: man which
    Have your script send six ping packets to your default gateway, utilizing the path discovered in the previous step, and assign the response to a variable using command substitution.
    Evaluate the response as being either successful or failure, and print an appropriate message to the screen.

Pseudo Example:

A=$(command_1)
B=$(command_2)
C=$($A command_3 $B)
if [[ "$" <condition> "$" ]]; then
   echo "successful";
else
   echo "failure";
fi 

Answer:
IP=$(ip route | awk '/default/{print $3}')
wtch=$(which ping)
combo=$($wtch -c 6 $IP |tail -2 | head -1 |awk -F, '{print $2}')
if [[ $combo == " 6 received" ]]; then 
echo "successful";
else
echo "failure";
fi





Activity:

    Create the following files in a new directory you create $HOME/ZIP:
        file1 will contain the md5sum of the text 12345
        file2 will contain the md5sum of the text 6789
        file3 will contain the md5sum of the text abcdef
    Create a zip file containing the three files above, without being stored inside a directory in the zip file. Name the zip file $HOME/ZIP/file.zip
        HINT: "Junk" the paths
    Utilize tar on $HOME/ZIP/file.zip to archive it into a file called $HOME/ZIP/file.tar.gz which should not include directories. Use the gzip option in tar, DO NOT use a seperate gzip binary.
        HINT: You might need an option to change directories first.

answer

mkdir $HOME/ZIP
touch file{1..3} $HOME/ZIP/
cd $HOME/ZIP
echo '12345' | md5sum | awk -F' ' '{print $1}' > $HOME/ZIP/file1
echo '6789' | md5sum | awk -F' ' '{print $1}' > $HOME/ZIP/file2
echo 'abcdef' | md5sum | awk -F' ' '{print $1}' > $HOME/ZIP/file3
zip -jr file.zip $HOME/ZIP
tar -czf file.tar.gz file.zip






Activity:

Utilize Bash looping to iteratively create each user account and their directories.

    Design a basic FOR Loop that iteratively alters the file system and user entries in a passwd-like file for new users: LARRY, CURLY, and MOE.
    Each user should have an entry in the $HOME/passwd file
    The userid and groupid will be the same and can be found as the sole contents of a file with the user's name in the $HOME directory (i.e. $HOME/LARRY.txt might contain 123)
    The home directory will be a directory with the user's name located under the $HOME directory (i.e. $HOME/LARRY)
        NOTE: Do NOT use shell expansion when specifying this in the $HOME/passwd file.
    The default shell will be /bin/bash
    The other fields in the new entries should match root's entry
    Users should be created in the order specified

answer

rootline=$(head -1 $HOME/passwd)
for x in {LARRY,CURLY,MOE}; do
myuid=$(cat $HOME/$x.txt)
mkdir $HOME/$x
echo "$rootline" | awk -F: -v user=$x -v uid=$myuid 'BEGIN{OFS=":"} {$1=user;$3=uid;$4=uid;$6="$HOME/"user}{print $0}' >> $HOME/passwd
done





Activity:

    Write a bash script that will find all the files in the /etc directory, and obtains the octal permission of those files. The stat command will be useful for this task.
    Depending how you go about your script, you may find writing to the local directory useful. What you must seperate out from the initial results are the octal permissions of 0-640 and those equal to and greater than 642, ie 0-640 goes to low.txt, while 642 is sent to high.txt.
    Have your script uniquely sort the contents of the two files by count, numerically-reversed, and output the results, with applicable titles, to the screen. An example of the desired output is shown below.
        NOTE: There is a blank line being printed between the two sections of the output below.

EXAMPLE OUTPUT:

Files w/ OCTAL Perm Values 642+:
    424 777
    365 644
     15 755
  
Files w/ OCTAL Perm Values 0-640:
      4 640
      3 440
      2 600
      1 444

answer
find /etc -type f 2>/dev/null -exec stat -c "%a" {} \; > $HOME/source 2>/dev/null
for x in $(cat $HOME/source) ; do 
if [[ $x -le 640 ]]; then 
echo \"$x\" >> $HOME/less
elif [[ $x -ge 642 ]]; then
echo \"$x\" >> $HOME/more
fi 
done
echo 'Files w/ OCTAL Perm Values 642+:'
cat $HOME/more | sort | uniq -c | sort -nr 
echo
echo 'Files w/ OCTAL Perm Values 0-640:'
echo
cat $HOME/less | sort | uniq -c | sort -nr


